{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI Toggle Documentation Welcome to the documentation for the UI Toggle component found in Core Community Content. This component will allow your players to toggle an option. It contains easy to use events and is easy to customise. If you want to get up and running quickly, then read the Quick Start guide, otherwise I would recommend reading through the pages and then try out the example that comes with the content.","title":"Home"},{"location":"#ui-toggle-documentation","text":"Welcome to the documentation for the UI Toggle component found in Core Community Content. This component will allow your players to toggle an option. It contains easy to use events and is easy to customise. If you want to get up and running quickly, then read the Quick Start guide, otherwise I would recommend reading through the pages and then try out the example that comes with the content.","title":"UI Toggle Documentation"},{"location":"context/","text":"Context It's good habit to put all your UI into a Client Context. The Server doesn't need to know about the UI components, client side scripts should be used for updating the UI. The UI Toggle component will throw an error if it's not in a Client Context as there is a client script that handles setup and events. More information on Contexts","title":"Context"},{"location":"context/#context","text":"It's good habit to put all your UI into a Client Context. The Server doesn't need to know about the UI components, client side scripts should be used for updating the UI. The UI Toggle component will throw an error if it's not in a Client Context as there is a client script that handles setup and events. More information on Contexts","title":"Context"},{"location":"events/","text":"Events The UI Toggle component has a simple event system using broadcasts . If you have set the event property then your event call will be made up with the name of your event you picked. Any custom event should be unique for each toggle. So for example if you have a toggle for turning music on and off and you set the event property to music , then your event will be like so. 1 2 3 Events . Connect ( \"on_music_toggled\" , function ( toggled )) Events . Broadcast ( \"on_music_enable\" ) Events . Broadcast ( \"on_music_disable\" ) Otherwise if you don't set an event, then they will be called using toggle instead. 1 2 3 Events . Connect ( \"on_toggle_toggled\" , function ( checked )) Events . Broadcast ( \"on_toggle_enable\" ) Events . Broadcast ( \"on_toggle_disable\" ) Here are a list of the events are what they do. Default Event Name Return Type Description on_toggle_toggled Event<boolean> Fires when an the toggle has been toggled. A boolean is returned which is the state of the toggle. Default Event Name Parameters Description on_toggle_enable None The component listens for this event and enables the toggle. on_toggle_disable boolean The component listens for this event and disables the toggle. You can pass in a boolean value if you want the checkmark to be cleared. Default is false .","title":"Events"},{"location":"events/#events","text":"The UI Toggle component has a simple event system using broadcasts . If you have set the event property then your event call will be made up with the name of your event you picked. Any custom event should be unique for each toggle. So for example if you have a toggle for turning music on and off and you set the event property to music , then your event will be like so. 1 2 3 Events . Connect ( \"on_music_toggled\" , function ( toggled )) Events . Broadcast ( \"on_music_enable\" ) Events . Broadcast ( \"on_music_disable\" ) Otherwise if you don't set an event, then they will be called using toggle instead. 1 2 3 Events . Connect ( \"on_toggle_toggled\" , function ( checked )) Events . Broadcast ( \"on_toggle_enable\" ) Events . Broadcast ( \"on_toggle_disable\" ) Here are a list of the events are what they do. Default Event Name Return Type Description on_toggle_toggled Event<boolean> Fires when an the toggle has been toggled. A boolean is returned which is the state of the toggle. Default Event Name Parameters Description on_toggle_enable None The component listens for this event and enables the toggle. on_toggle_disable boolean The component listens for this event and disables the toggle. You can pass in a boolean value if you want the checkmark to be cleared. Default is false .","title":"Events"},{"location":"example/","text":"Example The UI Toggle component comes with a working example that shows you a simple setup along with an example of how to use the events system. Drag and drop the UI Toggle Example template into your hierarchy. This example already has a client context and UI container setup. Enter play mode and test the 3 toggles. Toggle 3 is disabled and only enabled when toggle 2 is enabled. Example Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 -- Text UI components to show what was checked local text_box = script : GetCustomProperty ( \"text_box\" ): WaitForObject () -- First toggle event Events . Connect ( \"on_first_toggled\" , function ( state ) if ( state ) then text_box . text = \"First Toggled\" else text_box . text = \"First Untoggled\" end end ) -- Second toggle event -- This toggle enables / disables the third toggle Events . Connect ( \"on_second_toggled\" , function ( state ) if ( state ) then text_box . text = \"Second Toggled\" Events . Broadcast ( \"on_third_enable\" ) else text_box . text = \"Second Untoggled\" Events . Broadcast ( \"on_third_disable\" ) end end ) -- Third toggle event Events . Connect ( \"on_third_toggled\" , function ( state ) if ( state ) then text_box . text = \"Third Toggled\" else text_box . text = \"Third Untoggled\" end end ) -- Grab the local player local local_player = Game . GetLocalPlayer () -- Show cursor and allow UI to be intereacted with on player join. Game . playerJoinedEvent : Connect ( function () UI . SetCursorVisible ( true ) UI . SetCanCursorInteractWithUI ( true ) end )","title":"Example"},{"location":"example/#example","text":"The UI Toggle component comes with a working example that shows you a simple setup along with an example of how to use the events system. Drag and drop the UI Toggle Example template into your hierarchy. This example already has a client context and UI container setup. Enter play mode and test the 3 toggles. Toggle 3 is disabled and only enabled when toggle 2 is enabled.","title":"Example"},{"location":"example/#example-script","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 -- Text UI components to show what was checked local text_box = script : GetCustomProperty ( \"text_box\" ): WaitForObject () -- First toggle event Events . Connect ( \"on_first_toggled\" , function ( state ) if ( state ) then text_box . text = \"First Toggled\" else text_box . text = \"First Untoggled\" end end ) -- Second toggle event -- This toggle enables / disables the third toggle Events . Connect ( \"on_second_toggled\" , function ( state ) if ( state ) then text_box . text = \"Second Toggled\" Events . Broadcast ( \"on_third_enable\" ) else text_box . text = \"Second Untoggled\" Events . Broadcast ( \"on_third_disable\" ) end end ) -- Third toggle event Events . Connect ( \"on_third_toggled\" , function ( state ) if ( state ) then text_box . text = \"Third Toggled\" else text_box . text = \"Third Untoggled\" end end ) -- Grab the local player local local_player = Game . GetLocalPlayer () -- Show cursor and allow UI to be intereacted with on player join. Game . playerJoinedEvent : Connect ( function () UI . SetCursorVisible ( true ) UI . SetCanCursorInteractWithUI ( true ) end )","title":"Example Script"},{"location":"hierarchy/","text":"Add to Hierarchy Before you can use the component, you will need to place it into your hierarchy. In the Project Content window, find the UI Toggle component. Drag the component into your hierarchy which should now contain the component like so.","title":"Add to Hierarchy"},{"location":"hierarchy/#add-to-hierarchy","text":"Before you can use the component, you will need to place it into your hierarchy. In the Project Content window, find the UI Toggle component. Drag the component into your hierarchy which should now contain the component like so.","title":"Add to Hierarchy"},{"location":"properties/","text":"Properties The UI Toggle component comes with quite a few properties that allow for easy customisation. Property Name Description event A unique event can be set for broadcasting and listening. See the Events section for more information. hovered_color The color of the toggle when the mouse is hovered over them. unhovered_color The color of the toggle when the mouse moves off it. This is the default color. disabled_color The color of the toggle when it is disabled. border_color The color of the border around the toggle. check_color The color of the checkmark. disabled (boolean) If enabled then the toggle will be disabled at runtime. checked (boolean) If enabled then the toggle will be checked at runtime.","title":"Properties"},{"location":"properties/#properties","text":"The UI Toggle component comes with quite a few properties that allow for easy customisation. Property Name Description event A unique event can be set for broadcasting and listening. See the Events section for more information. hovered_color The color of the toggle when the mouse is hovered over them. unhovered_color The color of the toggle when the mouse moves off it. This is the default color. disabled_color The color of the toggle when it is disabled. border_color The color of the border around the toggle. check_color The color of the checkmark. disabled (boolean) If enabled then the toggle will be disabled at runtime. checked (boolean) If enabled then the toggle will be checked at runtime.","title":"Properties"},{"location":"quick-start/","text":"Quick Start If you want to get up and running quickly then follow the steps below. Drag the UI Toggle component into your UI Container (client context) hierarchy. (Optional) Set an Event name if you want to listen for events. Enter play mode and test your toggle out.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"If you want to get up and running quickly then follow the steps below. Drag the UI Toggle component into your UI Container (client context) hierarchy. (Optional) Set an Event name if you want to listen for events. Enter play mode and test your toggle out.","title":"Quick Start"}]}